#!/bin/bash

# ------------
# Log function.
#
# @author  Björn Hempel
# @version 1.0 (2018-08-11)
# ------------
log ()
{
  local            logText=$2
  local             status="${1^^}"
  local            showLog=${3:-1}
  local               date=`date "+%Y-%m-%d %H:%M:%S"`
  local      numberOfLines=$(echo -e "$logText" | wc -l)
  local multilineSignFirst='┏━  '
  local      multilineSign='┃   '
  local  multilineSignLast='┗━  '
  local           fillSign='‧'

  # disabled output
  if [ "$showLog" -lt 1 ]; then
    return 0
  fi

  if [ $status == "SUCCESS" ]; then
    status="\033[1;32m"$status"\033[0m"
  fi
  if [ $status == "WARNING" ]; then
    status="\033[1;33m"$status"\033[0m"
  fi
  if [ $status == "ERROR" ]; then
    status="\033[1;31m"$status"$fillSign$fillSign\033[0m"
  fi
  if [ $status == "INFO" ]; then
    status="\033[1;36m"$status"$fillSign$fillSign$fillSign\033[0m"
  fi
  if [ $status == "REMOTE" ]; then
    status="\033[1;35m"$status"$fillSign\033[0m"
  fi
  if [ $status == "HEADER" ]; then
    status="\033[1;34m"$status"$fillSign\033[0m"
    logText=${logText^^}
  fi

  # check multiline && replace line breaks
  if [ "$numberOfLines" -gt 1 ]; then
    logText="$multilineSignFirst$logText"
    logText=$(echo -en "$logText" | sed ":a;N;\$!ba;s/\\n/\\n                                $multilineSign/g")
    logText=$(echo -en "$logText" | sed '$s/┃ /┗━/g')
  fi

  echo -e "[$date] [$status] $logText"
}


# ------------
# Config parser
#
# @author  Björn Hempel
# @version 1.0 (2018-08-11)
# ------------
cfgParser ()
{
  # read the given file
  # print the content with:
  # $ echo "${config[*]}"
  local config="$(<$1)" # read the file

  # read the config prefix
  local configPrefix="${2:-conf}"

  # replace 'xyz {' into 'conf.xyz () {' and remove commented lines
  local config=$(echo "${config[*]}" | sed '/^#/d' | sed -r 's/([a-z0-9.\-]+)[ ]*\{/'$configPrefix'.\1 \(\) {/g')

  # collect function names
  local regex="($configPrefix.([a-z0-9.\-]+))[ ]*\(\)[ ]*\{"
  local functionNames=""
  local confNames=""
  while read -r configLine; do
    if [[ "$configLine" =~ $regex ]] ; then
      if [ "$functionNames" != "" ]; then
        functionNames="$functionNames "
        confNames="$confNames "
      fi
      functionNames="$functionNames${BASH_REMATCH[1]}"
      confNames="$confNames${BASH_REMATCH[2]}"
    fi
  done <<< "${config[*]}"

  # add variable with function names
  config+=($'\n')
  config+=($'\n'$configPrefix'Functions=('$functionNames')')
  config+=($'\n'$configPrefix's=('$confNames')')

  # eval the result
  # print the result with
  # $ echo "${config[*]}"
  eval "$(echo "${config[*]}")"
}

# ------------
# Folder creator
#
# @author  Björn Hempe <bjoern@hempel.li>
# @version 1.0 (2018-08-11)
# ------------
createFolderIfNotExists()
{
    folder="$1"

    if [ ! -d "$folder" ]; then
        log 'info' "Try to create folder \"$folder\"."
        mkdir "$folder"
    fi
    if [ ! -d "$folder" ]; then
        log 'error' "Unable to create \"$folder\". Abort." && return 1
    fi

    log 'info' "Folder \"$folder\" exists. Perfect."

    return 0
}

# ------------
# Repository checkout
#
# @author  Björn Hempe l<bjoern@hempel.li>
# @version 1.0 (2018-08-11)
# ------------
gitCheckoutIfNotExists()
{
    repository="$1"
        folder="$2"

    # TODO: build a better check
    numberFiles=$(countFiles "$folder")

    if [ "$numberFiles" -eq "0" ]; then
        if ! applicationExists "git"; then
            log 'error' 'git application does not exist'
        fi

        git clone "$repository" "$folder"
    fi

    # TODO: build a better check
    numberFiles=$(countFiles "$folder")

    if [ "$numberFiles" -eq "0" ]; then
        log 'error' "Unable to check out the repository \"$repository\" into the folder \"$folder\"." && return 1
    fi

    log 'info' "Content inside the git folder exists. Perfect."
}

# ------------
# Symlink creator
#
# @author  Björn Hempel<bjoern@hempel.li>
# @version 1.0
# @date    2016-11-12
# ------------
createSymlinkIfNotExists()
{
    sourceFile="$1"
    targetFile="$2"

    # check if symlink already exists
    if [ ! -e "$targetFile" ]; then
        if [ ! -f "$sourceFile" ]; then
            log 'error' "The source file \"$sourceFile\" does not exist. Abort." && return 1
        fi

        # remove broken symlink
        if [ -f "$targetFile" ]; then
            rm "$targetFile"
        fi

        # create symlink
        ln -s "$sourceFile" "$targetFile"
    fi

    # check again
    if [ ! -e "$targetFile" ]; then
        log 'error' "Unable to create the symlink \"$targetFile\"." && return 1
    fi

    # success message
    log 'info' "Symlink \"$targetFile\" exists. Perfect."
}

# ------------
# Copy a file if it does not exist.
#
# @author  Björn Hempel
# @version 1.0
# ------------
copyFileIfNotExits()
{
    sourceFile="$1"
    targetFile="$2"

    # check if file already exists
    if [ ! -f "$targetFile" ]; then
        if [ ! -f "$sourceFile" ]; then
            log 'error' "The source file \"$sourceFile\" does not exist. Abort." && return 1
        fi

        cp "$sourceFile" "$targetFile"
    fi

    # check again
    if [ ! -f "$targetFile" ]; then
        log 'error' "Unable to create the target file \"$targetFile\"." && return 1
    fi

    # success message
    log 'info' "File \"$targetFile\" exists. Perfect."
}

# ------------
# check if a given application exists
#
# @author  Björn Hempel
# @version 1.0
# ------------
applicationExists()
{
  `which $1 >/dev/null`
}

# -----
# Counts the files and folders within the given folder
#
# @author  Björn Hempel <bjoern.hempel@ressourcenmangel.de>
# @date    2016-11-01
# @version 1.0
# -----
countFiles ()
{
    local numberFiles=$(ls -la "$1" | grep -v "total " | grep -v ".deploy-" | wc -l)

    echo "$((numberFiles - 2))"
}

